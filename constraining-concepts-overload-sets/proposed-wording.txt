16.3.2, Paragraph 3:

Second, for a function to be viable, if it has associated constraints, those constraints shall be satisfied (17.4.2).

Add this text (Paragraph 3a):
For a function to be viable, if one of the parameters is a constrained variable and the function
is found in the associated namespaces of the constrained variable, and the function was not imported
into the calling context by a using-declaration, then the function shall be used in satisfying the
constraint.

16.3.2, Paragraph 4: 

Third, for F to be a viable function, there shall exist for each argument an implicit conversion sequence
(16.3.3.1) that converts that argument to the corresponding parameter of F. If the parameter has reference
type, the implicit conversion sequence includes the operation of binding the reference, and the fact
that an lvalue reference to non-const cannot be bound to an rvalue and that an rvalue reference cannot
be bound to an lvalue can affect the viability of the function (see 16.3.3.1.4).

Add this text (Paragraph 4a):

Any conversion sequence, including any move and copy constructors, necessary to apply a constrained variable
to invoke a function which involves that constrained variable shall not be considered to be unviable if the
actual function call was considered viable because it was used in satisfying the constraint.
